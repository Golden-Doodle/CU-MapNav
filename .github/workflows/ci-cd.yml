name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: expo-app/package-lock.json
          
      - name: Install Expo CLI
        run: npm install expo-cli
        working-directory: expo-app
        
      - name: Install Dependencies
        run: npm install
        working-directory: expo-app

  jest-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: expo-app/package-lock.json
  
      - name: Install Dependencies
        run: |
          npm install
          npm install --save-dev jest-expo
        working-directory: expo-app
  
      - name: Run Jest Tests with Coverage
        run: |
          npx jest --coverage --ci --passWithNoTests
        working-directory: expo-app
  
      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: expo-app/coverage/lcov.info
          fail_ci_if_error: true
          verbose: true


  maestro-tests:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: expo-app/package-lock.json

      - name: Install Expo CLI
        run: npm install -g expo-cli

      - name: Install Dependencies
        run: npm install
        working-directory: expo-app

      - name: Install Maestro
        run: |
          curl -Ls "https://get.maestro.mobile.dev" | bash
          echo "$HOME/.maestro/bin" >> $GITHUB_PATH
          export PATH="$HOME/.maestro/bin:$PATH"

      - name: Verify Maestro Installation
        run: maestro --version

      - name: Install and Accept Android SDK Licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install \
            "platforms;android-31" \
            "build-tools;31.0.0" \
            "platform-tools" \
            "system-images;android-31;google_apis;x86_64"

      - name: Create Emulator
        run: |
          echo "Creating Android emulator..."
          $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd -n test_emulator \
            -k "system-images;android-31;google_apis;x86_64" --device "pixel_4" || true

      - name: Start Emulator
        run: |
          echo "Starting emulator..."
          nohup $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window -no-snapshot -gpu swiftshader_indirect > /dev/null 2>&1 &
          sleep 10

      - name: Check Emulator Boot Status
        run: |
          echo "Checking emulator status..."
          adb wait-for-device
          adb shell getprop sys.boot_completed
          adb devices

      - name: Ensure Emulator is Fully Booted
        run: |
          echo "Waiting for emulator to fully boot..."
          boot_completed="false"
          timeout=300  # 5 minutes max wait time
          elapsed=0
          while [ "$boot_completed" != "1" ] && [ $elapsed -lt $timeout ]; do
            sleep 10
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null)
            echo "Waiting for emulator to boot... ($elapsed sec)"
            elapsed=$((elapsed+10))
          done

          if [ "$boot_completed" != "1" ]; then
            echo "Emulator failed to boot!"
            adb devices
            exit 1
          fi

          echo "Emulator is fully booted!"

      - name: Verify Emulator is Running
        run: adb devices

      - name: Start Expo in the Background
        run: |
          npx expo start --android --no-interactive &
          sleep 60

      - name: Run Maestro Tests
        run: maestro test expo-app/maestro-tests

      - name: Upload Maestro Test Artifacts (if failures)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-test-results
          path: expo-app/maestro-tests/results

          

  sonarqube:
    needs: [jest-tests, maestro-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.organization=your-org
            -Dsonar.projectKey=your-project
            -Dsonar.sources=expo-app/app
            -Dsonar.test.inclusions=expo-app/__tests__/**/*.test.{js,ts,tsx}
            -Dsonar.exclusions=expo-app/node_modules/**,expo-app/coverage/**,expo-app/__tests__/**
            -Dsonar.javascript.lcov.reportPaths=expo-app/coverage/lcov.info
            -Dsonar.tests=expo-app/__tests__

  deploy:
    needs: [sonarqube]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy Application
        run: |
          echo "Deploying application..."
          # Add deployment steps here
