name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: expo-app/package-lock.json
          
      - name: Install Expo CLI
        run: npm install expo-cli
        working-directory: expo-app
        
      - name: Install Dependencies
        run: npm install
        working-directory: expo-app

      - name: Install Google Sign-In
        run: npm install @react-native-google-signin/google-signin
        working-directory: expo-app

  jest-tests:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: expo-app/package-lock.json

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-cache-${{ runner.os }}-${{ hashFiles('expo-app/package-lock.json') }}
          restore-keys: |
            node-cache-${{ runner.os }}-
  
      - name: Install Dependencies
        run: |
          npm install
          npm install --save-dev jest-expo
        working-directory: expo-app
  
      - name: Run Jest Tests with Coverage
        run: |
          npx jest --coverage --ci --passWithNoTests || true
        working-directory: expo-app
  
      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: expo-app/coverage/lcov.info
          fail_ci_if_error: true
          verbose: true

  maestro-tests:
    needs: setup
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: package-lock.json
  
      - name: Install Dependencies
        run: npm install
        working-directory: expo-app
  
      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Start EAS Build (Android)
        run: eas build --platform android --profile production --non-interactive --no-wait
        working-directory: expo-app
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Wait for EAS Build to Complete
        run: |
          echo "⏳ Waiting for the EAS Build to complete..."
          
          # Retrieve the latest build ID
          BUILD_ID=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].id')
      
          if [[ -z "$BUILD_ID" || "$BUILD_ID" == "null" ]]; then
            echo "❌ No build found. Exiting."
            exit 1
          fi
      
          echo "🔄 Waiting for build to complete. Build ID: $BUILD_ID"
          
          eas build:wait --build-id "$BUILD_ID"
        working-directory: expo-app
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      
      - name: Get APK Download URL
        run: |
          BUILD_URL=$(eas build:list --platform android --limit 1 --json | jq -r '.[0].artifacts.buildUrl')
      
          if [[ -z "$BUILD_URL" || "$BUILD_URL" == "null" ]]; then
            echo "❌ No valid build URL found. Exiting."
            exit 1
          fi
      
          echo "✅ Build complete! APK available at: $BUILD_URL"
          echo "BUILD_URL=$BUILD_URL" >> $GITHUB_ENV
        working-directory: expo-app
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      
      - name: Download APK from EAS
        run: curl -o expo-app/build/app-release.apk "$BUILD_URL"
        working-directory: expo-app
      
      - name: Verify APK File Exists
        run: |
          if [ ! -f "expo-app/build/app-release.apk" ]; then
            echo "❌ APK file not found at expo-app/build/app-release.apk"
            exit 1
          else
            echo "✅ APK file found, proceeding with upload"
          fi
   
      - name: Upload APK to RobinTest
        run: |
          curl -X POST "https://api.robintest.com/v1/tests/run" \
          -H "Authorization: Bearer ${{ secrets.ROBINTEST_API_KEY }}" \
          -F "file=@expo-app/build/app-release.apk"

          
  sonarqube:
    needs: [jest-tests, maestro-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.organization=your-org
            -Dsonar.projectKey=your-project
            -Dsonar.sources=expo-app/app
            -Dsonar.test.inclusions=expo-app/__tests__/**/*.test.{js,ts,tsx}
            -Dsonar.exclusions=expo-app/node_modules/**,expo-app/coverage/**,expo-app/__tests__/**
            -Dsonar.javascript.lcov.reportPaths=expo-app/coverage/lcov.info
            -Dsonar.tests=expo-app/__tests__

  deploy:
    needs: [sonarqube]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy Application
        run: |
          echo "Deploying application..."
          # Add deployment steps here
